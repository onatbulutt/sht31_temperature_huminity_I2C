
sht31_temperature_huminity_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c5c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003de4  08003de4  00013de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ebc  08003ebc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ebc  08003ebc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ebc  08003ebc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  08003ed0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08003ed0  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000785c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001643  00000000  00000000  000278db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000730  00000000  00000000  00028f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000572  00000000  00000000  00029650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199d1  00000000  00000000  00029bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a373  00000000  00000000  00043593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094ee3  00000000  00000000  0004d906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d60  00000000  00000000  000e27ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e454c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003dcc 	.word	0x08003dcc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003dcc 	.word	0x08003dcc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a8:	f000 fcac 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ac:	f000 f824 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b0:	f000 f8c0 	bl	8000b34 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009b4:	f000 f876 	bl	8000aa4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009be:	480b      	ldr	r0, [pc, #44]	; (80009ec <main+0x48>)
 80009c0:	f000 ff5e 	bl	8001880 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      SensorTest();
 80009c4:	f000 f8e8 	bl	8000b98 <SensorTest>
	  Read();
 80009c8:	f000 f8fe 	bl	8000bc8 <Read>
	  //HAL_Delay(1000);
	  UnSigned_Numeric_Print(temperature, 3, 1);
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <main+0x4c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2201      	movs	r2, #1
 80009d2:	2103      	movs	r1, #3
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 fb2f 	bl	8001038 <UnSigned_Numeric_Print>
	  UnSigned_Numeric_Print(huminity, 3, 2);
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <main+0x50>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2202      	movs	r2, #2
 80009e0:	2103      	movs	r1, #3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fb28 	bl	8001038 <UnSigned_Numeric_Print>
      SensorTest();
 80009e8:	e7ec      	b.n	80009c4 <main+0x20>
 80009ea:	bf00      	nop
 80009ec:	48000400 	.word	0x48000400
 80009f0:	200000a2 	.word	0x200000a2
 80009f4:	200000a3 	.word	0x200000a3

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b09c      	sub	sp, #112	; 0x70
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a02:	2228      	movs	r2, #40	; 0x28
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 f9b4 	bl	8003d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2234      	movs	r2, #52	; 0x34
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 f9a6 	bl	8003d74 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a30:	2310      	movs	r3, #16
 8000a32:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a34:	2302      	movs	r3, #2
 8000a36:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a3c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fdde 	bl	8002608 <HAL_RCC_OscConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000a52:	f000 fb7f 	bl	8001154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a56:	230f      	movs	r3, #15
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a70:	2102      	movs	r1, #2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f002 fe06 	bl	8003684 <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a7e:	f000 fb69 	bl	8001154 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a82:	2320      	movs	r3, #32
 8000a84:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 ffdf 	bl	8003a50 <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a98:	f000 fb5c 	bl	8001154 <Error_Handler>
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3770      	adds	r7, #112	; 0x70
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <MX_I2C1_Init+0x80>)
 8000aaa:	4a1f      	ldr	r2, [pc, #124]	; (8000b28 <MX_I2C1_Init+0x84>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <MX_I2C1_Init+0x80>)
 8000ab0:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <MX_I2C1_Init+0x88>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_I2C1_Init+0x80>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_I2C1_Init+0x80>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_I2C1_Init+0x80>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_I2C1_Init+0x80>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_I2C1_Init+0x80>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_I2C1_Init+0x80>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_I2C1_Init+0x80>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ade:	4811      	ldr	r0, [pc, #68]	; (8000b24 <MX_I2C1_Init+0x80>)
 8000ae0:	f000 fee6 	bl	80018b0 <HAL_I2C_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aea:	f000 fb33 	bl	8001154 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <MX_I2C1_Init+0x80>)
 8000af2:	f001 fcf1 	bl	80024d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000afc:	f000 fb2a 	bl	8001154 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4808      	ldr	r0, [pc, #32]	; (8000b24 <MX_I2C1_Init+0x80>)
 8000b04:	f001 fd33 	bl	800256e <HAL_I2CEx_ConfigDigitalFilter>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b0e:	f000 fb21 	bl	8001154 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_I2C1_Init+0x8c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <MX_I2C1_Init+0x8c>)
 8000b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b1c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000044 	.word	0x20000044
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	10909cec 	.word	0x10909cec
 8000b30:	40010000 	.word	0x40010000

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]


/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_GPIO_Init+0x5c>)
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <MX_GPIO_Init+0x5c>)
 8000b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b52:	6153      	str	r3, [r2, #20]
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_GPIO_Init+0x5c>)
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b66:	480b      	ldr	r0, [pc, #44]	; (8000b94 <MX_GPIO_Init+0x60>)
 8000b68:	f000 fe8a 	bl	8001880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_14|GPIO_PIN_15;
 8000b6c:	f24e 0340 	movw	r3, #57408	; 0xe040
 8000b70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_GPIO_Init+0x60>)
 8000b84:	f000 fd0a 	bl	800159c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b88:	bf00      	nop
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40021000 	.word	0x40021000
 8000b94:	48000400 	.word	0x48000400

08000b98 <SensorTest>:


}
/* USER CODE BEGIN 4 */
void SensorTest(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1,0x45<<1,4,100)!=HAL_OK)
 8000b9c:	2364      	movs	r3, #100	; 0x64
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	218a      	movs	r1, #138	; 0x8a
 8000ba2:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <SensorTest+0x28>)
 8000ba4:	f001 f8fe 	bl	8001da4 <HAL_I2C_IsDeviceReady>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <SensorTest+0x1e>
	{
	  readyFlag=1;
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <SensorTest+0x2c>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		readyFlag=0;
	}
}
 8000bb4:	e002      	b.n	8000bbc <SensorTest+0x24>
		readyFlag=0;
 8000bb6:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <SensorTest+0x2c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000044 	.word	0x20000044
 8000bc4:	2000009c 	.word	0x2000009c

08000bc8 <Read>:

void Read(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af02      	add	r7, sp, #8

	uint8_t txData[2]={0x2c,0x06};//sensörden sıcaklık verisi almak için gerekli adres değeri(msb,lsb) datasheetden bulundu
 8000bce:	f240 632c 	movw	r3, #1580	; 0x62c
 8000bd2:	81bb      	strh	r3, [r7, #12]
	uint8_t rxData[6] = {0}; //sensörden gelecek olan veri 6 bayt lık bir değer.
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	2300      	movs	r3, #0
 8000bda:	813b      	strh	r3, [r7, #8]
	// sırasıyla: temperature msb,temperature lsb, checksum, huminity msb,huminity lsb
	status= HAL_I2C_Master_Transmit(&hi2c1, (0x44<<1)|0x00, txData, 2, HAL_MAX_DELAY);//sensöre sıcaklık ve nem değerleri istediğimi iletiyorum.
 8000bdc:	f107 020c 	add.w	r2, r7, #12
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2302      	movs	r3, #2
 8000be8:	2188      	movs	r1, #136	; 0x88
 8000bea:	4847      	ldr	r0, [pc, #284]	; (8000d08 <Read+0x140>)
 8000bec:	f000 fef0 	bl	80019d0 <HAL_I2C_Master_Transmit>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b45      	ldr	r3, [pc, #276]	; (8000d0c <Read+0x144>)
 8000bf6:	701a      	strb	r2, [r3, #0]
	if(status!=HAL_OK) //eğer gönderdiğim komut gitmemişse
 8000bf8:	4b44      	ldr	r3, [pc, #272]	; (8000d0c <Read+0x144>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <Read+0x40>
	{
		readFlag=0;
 8000c00:	4b43      	ldr	r3, [pc, #268]	; (8000d10 <Read+0x148>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
				temperature = (175.0 * sensorTempValue / 65535.0) - 45.0;
			}


	}
}
 8000c06:	e071      	b.n	8000cec <Read+0x124>
		readFlag=1;
 8000c08:	4b41      	ldr	r3, [pc, #260]	; (8000d10 <Read+0x148>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
		status2= HAL_I2C_Master_Receive(&hi2c1, (0x44<<1)|0x01, rxData, 6, HAL_MAX_DELAY);//sensör bana sıcaklık ve nem değerleri alıyorum
 8000c0e:	1d3a      	adds	r2, r7, #4
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2306      	movs	r3, #6
 8000c18:	2189      	movs	r1, #137	; 0x89
 8000c1a:	483b      	ldr	r0, [pc, #236]	; (8000d08 <Read+0x140>)
 8000c1c:	f000 ffcc 	bl	8001bb8 <HAL_I2C_Master_Receive>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b3b      	ldr	r3, [pc, #236]	; (8000d14 <Read+0x14c>)
 8000c26:	701a      	strb	r2, [r3, #0]
		if(status2!=HAL_OK)
 8000c28:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <Read+0x14c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <Read+0x70>
				sensorFlag=0;
 8000c30:	4b39      	ldr	r3, [pc, #228]	; (8000d18 <Read+0x150>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
}
 8000c36:	e059      	b.n	8000cec <Read+0x124>
				sensorFlag=1;
 8000c38:	4b37      	ldr	r3, [pc, #220]	; (8000d18 <Read+0x150>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
				sensorTempValue= (rxData[0]<<8)| rxData[1]; //temperature verisi sensörden 16 bit olarak geliyor. sensörün özelliği
 8000c3e:	793b      	ldrb	r3, [r7, #4]
 8000c40:	021b      	lsls	r3, r3, #8
 8000c42:	b21a      	sxth	r2, r3
 8000c44:	797b      	ldrb	r3, [r7, #5]
 8000c46:	b21b      	sxth	r3, r3
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	b21b      	sxth	r3, r3
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	4b33      	ldr	r3, [pc, #204]	; (8000d1c <Read+0x154>)
 8000c50:	801a      	strh	r2, [r3, #0]
				sensorHuminityValue= (rxData[3]<<8)| rxData[4];
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	b21a      	sxth	r2, r3
 8000c58:	7a3b      	ldrb	r3, [r7, #8]
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <Read+0x158>)
 8000c64:	801a      	strh	r2, [r3, #0]
				huminity = (100.0 * sensorTempValue / 65535.0);//sıcaklık hesaplarken yapılan şeyler burda da geçerlidir.
 8000c66:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <Read+0x154>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fbfe 	bl	800046c <__aeabi_i2d>
 8000c70:	f04f 0200 	mov.w	r2, #0
 8000c74:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <Read+0x15c>)
 8000c76:	f7ff fc63 	bl	8000540 <__aeabi_dmul>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	4610      	mov	r0, r2
 8000c80:	4619      	mov	r1, r3
 8000c82:	a31d      	add	r3, pc, #116	; (adr r3, 8000cf8 <Read+0x130>)
 8000c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c88:	f7ff fd84 	bl	8000794 <__aeabi_ddiv>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4610      	mov	r0, r2
 8000c92:	4619      	mov	r1, r3
 8000c94:	f7ff fe66 	bl	8000964 <__aeabi_d2uiz>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <Read+0x160>)
 8000c9e:	701a      	strb	r2, [r3, #0]
				temperature = (175.0 * sensorTempValue / 65535.0) - 45.0;
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <Read+0x154>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fbe1 	bl	800046c <__aeabi_i2d>
 8000caa:	a315      	add	r3, pc, #84	; (adr r3, 8000d00 <Read+0x138>)
 8000cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb0:	f7ff fc46 	bl	8000540 <__aeabi_dmul>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	4610      	mov	r0, r2
 8000cba:	4619      	mov	r1, r3
 8000cbc:	a30e      	add	r3, pc, #56	; (adr r3, 8000cf8 <Read+0x130>)
 8000cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc2:	f7ff fd67 	bl	8000794 <__aeabi_ddiv>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	460b      	mov	r3, r1
 8000cca:	4610      	mov	r0, r2
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f04f 0200 	mov.w	r2, #0
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <Read+0x164>)
 8000cd4:	f7ff fa7c 	bl	80001d0 <__aeabi_dsub>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4610      	mov	r0, r2
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f7ff fe40 	bl	8000964 <__aeabi_d2uiz>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <Read+0x168>)
 8000cea:	701a      	strb	r2, [r3, #0]
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	f3af 8000 	nop.w
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	40efffe0 	.word	0x40efffe0
 8000d00:	00000000 	.word	0x00000000
 8000d04:	4065e000 	.word	0x4065e000
 8000d08:	20000044 	.word	0x20000044
 8000d0c:	20000098 	.word	0x20000098
 8000d10:	2000009a 	.word	0x2000009a
 8000d14:	20000099 	.word	0x20000099
 8000d18:	2000009b 	.word	0x2000009b
 8000d1c:	2000009e 	.word	0x2000009e
 8000d20:	200000a0 	.word	0x200000a0
 8000d24:	40590000 	.word	0x40590000
 8000d28:	200000a3 	.word	0x200000a3
 8000d2c:	40468000 	.word	0x40468000
 8000d30:	200000a2 	.word	0x200000a2

08000d34 <DisplayIndex_Control>:

void DisplayIndex_Control(void)// 7 adet katotumuz var....
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  // Display Taramasi 0..7 Olarak Yapiliyor.
  DisplayIndex++;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <DisplayIndex_Control+0x2c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	3301      	adds	r3, #1
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <DisplayIndex_Control+0x2c>)
 8000d44:	701a      	strb	r2, [r3, #0]
  if (DisplayIndex >=8) DisplayIndex=0;//DisplayIndex 8 mi ? 8 ise sifirla.
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <DisplayIndex_Control+0x2c>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b07      	cmp	r3, #7
 8000d4e:	d902      	bls.n	8000d56 <DisplayIndex_Control+0x22>
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <DisplayIndex_Control+0x2c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	20000028 	.word	0x20000028

08000d64 <Display_Drive>:
//-----------------------------------------------------------------------------------------------------------------//
//       Display Drive
//-----------------------------------------------------------------------------------------------------------------//
//DISPLAY TARAMADA DISPLAYLERE GIDEN BILGININ ISLENMESI RUTINI
void Display_Drive(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  uint8_t 	i;    // 8 bitlik unsigned 'i'  degiskeni tanimlanmis
  uint16_t 	Temp; // 8 bitlik bir Temp Registeri Tanimlaniyor.Temp deiskeni Herbir Segmenti Temsil ediyor.

  SerialData_Anot  = Segment_Table[DisplayBuffer[DisplayIndex]];
 8000d6a:	4b71      	ldr	r3, [pc, #452]	; (8000f30 <Display_Drive+0x1cc>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b70      	ldr	r3, [pc, #448]	; (8000f34 <Display_Drive+0x1d0>)
 8000d74:	5c9b      	ldrb	r3, [r3, r2]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b6f      	ldr	r3, [pc, #444]	; (8000f38 <Display_Drive+0x1d4>)
 8000d7c:	5c9b      	ldrb	r3, [r3, r2]
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4b6e      	ldr	r3, [pc, #440]	; (8000f3c <Display_Drive+0x1d8>)
 8000d82:	801a      	strh	r2, [r3, #0]
  SerialData_Katot = DisplayIndex_Table[DisplayIndex];
 8000d84:	4b6a      	ldr	r3, [pc, #424]	; (8000f30 <Display_Drive+0x1cc>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b6c      	ldr	r3, [pc, #432]	; (8000f40 <Display_Drive+0x1dc>)
 8000d8e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000d92:	4b6c      	ldr	r3, [pc, #432]	; (8000f44 <Display_Drive+0x1e0>)
 8000d94:	801a      	strh	r2, [r3, #0]


  // SEGMENT KONTROL BOLUMU
  DSP_STB_LO;  // Strobe Baslangiçta LOW'lanmistir
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	486a      	ldr	r0, [pc, #424]	; (8000f48 <Display_Drive+0x1e4>)
 8000d9e:	f000 fd6f 	bl	8001880 <HAL_GPIO_WritePin>
  DSP_SI_LO;   // Data Baslangiçta LOW'lanmistir
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da8:	4867      	ldr	r0, [pc, #412]	; (8000f48 <Display_Drive+0x1e4>)
 8000daa:	f000 fd69 	bl	8001880 <HAL_GPIO_WritePin>
  DSP_CLK_LO;  // Clock Baslangiçta LOW'lanmistir
 8000dae:	2200      	movs	r2, #0
 8000db0:	2140      	movs	r1, #64	; 0x40
 8000db2:	4865      	ldr	r0, [pc, #404]	; (8000f48 <Display_Drive+0x1e4>)
 8000db4:	f000 fd64 	bl	8001880 <HAL_GPIO_WritePin>
  __NOP();
 8000db8:	bf00      	nop
  __NOP();
 8000dba:	bf00      	nop
  __NOP();
 8000dbc:	bf00      	nop
  __NOP();
 8000dbe:	bf00      	nop
  __NOP();
 8000dc0:	bf00      	nop
  __NOP();
 8000dc2:	bf00      	nop
  __NOP();
 8000dc4:	bf00      	nop
  __NOP();
 8000dc6:	bf00      	nop
  __NOP();
 8000dc8:	bf00      	nop
  __NOP();
 8000dca:	bf00      	nop

  //--------------------------------------------------------------------------------
  //--------------------------------------------------------------------------------
  // KATOT BILGISINI GONDERIYORUZ................................................
  for (i=0;i<8;i++)// KATOT YUKLENIYOR
 8000dcc:	2300      	movs	r3, #0
 8000dce:	71fb      	strb	r3, [r7, #7]
 8000dd0:	e04a      	b.n	8000e68 <Display_Drive+0x104>
  {
	if((SerialData_Katot&BitTest_Table[i])!=0x00) DSP_SI_HI;
 8000dd2:	4b5c      	ldr	r3, [pc, #368]	; (8000f44 <Display_Drive+0x1e0>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	4619      	mov	r1, r3
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	4a5b      	ldr	r2, [pc, #364]	; (8000f4c <Display_Drive+0x1e8>)
 8000dde:	5cd3      	ldrb	r3, [r2, r3]
 8000de0:	400b      	ands	r3, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d005      	beq.n	8000df2 <Display_Drive+0x8e>
 8000de6:	2201      	movs	r2, #1
 8000de8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dec:	4856      	ldr	r0, [pc, #344]	; (8000f48 <Display_Drive+0x1e4>)
 8000dee:	f000 fd47 	bl	8001880 <HAL_GPIO_WritePin>
	if((SerialData_Katot&BitTest_Table[i])==0x00) DSP_SI_LO;
 8000df2:	4b54      	ldr	r3, [pc, #336]	; (8000f44 <Display_Drive+0x1e0>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4619      	mov	r1, r3
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	4a53      	ldr	r2, [pc, #332]	; (8000f4c <Display_Drive+0x1e8>)
 8000dfe:	5cd3      	ldrb	r3, [r2, r3]
 8000e00:	400b      	ands	r3, r1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d105      	bne.n	8000e12 <Display_Drive+0xae>
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e0c:	484e      	ldr	r0, [pc, #312]	; (8000f48 <Display_Drive+0x1e4>)
 8000e0e:	f000 fd37 	bl	8001880 <HAL_GPIO_WritePin>
	__NOP();
 8000e12:	bf00      	nop
	__NOP();
 8000e14:	bf00      	nop
	__NOP();
 8000e16:	bf00      	nop
	__NOP();
 8000e18:	bf00      	nop
	__NOP();
 8000e1a:	bf00      	nop
	__NOP();
 8000e1c:	bf00      	nop
		__NOP();
 8000e1e:	bf00      	nop
		__NOP();
 8000e20:	bf00      	nop
		__NOP();
 8000e22:	bf00      	nop
		__NOP();
 8000e24:	bf00      	nop
	DSP_CLK_HI;
 8000e26:	2201      	movs	r2, #1
 8000e28:	2140      	movs	r1, #64	; 0x40
 8000e2a:	4847      	ldr	r0, [pc, #284]	; (8000f48 <Display_Drive+0x1e4>)
 8000e2c:	f000 fd28 	bl	8001880 <HAL_GPIO_WritePin>
	__NOP();
 8000e30:	bf00      	nop
	__NOP();
 8000e32:	bf00      	nop
	__NOP();
 8000e34:	bf00      	nop
	__NOP();
 8000e36:	bf00      	nop
	__NOP();
 8000e38:	bf00      	nop
	__NOP();
 8000e3a:	bf00      	nop
		__NOP();
 8000e3c:	bf00      	nop
		__NOP();
 8000e3e:	bf00      	nop
		__NOP();
 8000e40:	bf00      	nop
		__NOP();
 8000e42:	bf00      	nop
	DSP_CLK_LO;
 8000e44:	2200      	movs	r2, #0
 8000e46:	2140      	movs	r1, #64	; 0x40
 8000e48:	483f      	ldr	r0, [pc, #252]	; (8000f48 <Display_Drive+0x1e4>)
 8000e4a:	f000 fd19 	bl	8001880 <HAL_GPIO_WritePin>
	__NOP();
 8000e4e:	bf00      	nop
	__NOP();
 8000e50:	bf00      	nop
	__NOP();
 8000e52:	bf00      	nop
	__NOP();
 8000e54:	bf00      	nop
	__NOP();
 8000e56:	bf00      	nop
	__NOP();
 8000e58:	bf00      	nop
		__NOP();
 8000e5a:	bf00      	nop
		__NOP();
 8000e5c:	bf00      	nop
		__NOP();
 8000e5e:	bf00      	nop
		__NOP();
 8000e60:	bf00      	nop
  for (i=0;i<8;i++)// KATOT YUKLENIYOR
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	3301      	adds	r3, #1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2b07      	cmp	r3, #7
 8000e6c:	d9b1      	bls.n	8000dd2 <Display_Drive+0x6e>


  //--------------------------------------------------------------------------------
  //--------------------------------------------------------------------------------
  // ANOT1 BILGISINI GONDERIYORUZ..................................................
  Temp = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	80bb      	strh	r3, [r7, #4]

  if((SerialData_Anot&0x80)==0x80) Temp=Temp|0x01;//A			// Tablodaki Segment Siramiz ABCDEFGP Seklinde Giderken,
 8000e72:	4b32      	ldr	r3, [pc, #200]	; (8000f3c <Display_Drive+0x1d8>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7c:	2b80      	cmp	r3, #128	; 0x80
 8000e7e:	d103      	bne.n	8000e88 <Display_Drive+0x124>
 8000e80:	88bb      	ldrh	r3, [r7, #4]
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	80bb      	strh	r3, [r7, #4]
  if((SerialData_Anot&0x40)==0x40) Temp=Temp|0x02;//B			// Hardawaredeki Segment Siramiz XXXXXXXX Seklinde Oldugundan,
 8000e88:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <Display_Drive+0x1d8>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e92:	2b40      	cmp	r3, #64	; 0x40
 8000e94:	d103      	bne.n	8000e9e <Display_Drive+0x13a>
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	80bb      	strh	r3, [r7, #4]
  if((SerialData_Anot&0x20)==0x20) Temp=Temp|0x04;//C			// Bitlerin Yerini Degistirdik.....
 8000e9e:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <Display_Drive+0x1d8>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	f003 0320 	and.w	r3, r3, #32
 8000ea8:	2b20      	cmp	r3, #32
 8000eaa:	d103      	bne.n	8000eb4 <Display_Drive+0x150>
 8000eac:	88bb      	ldrh	r3, [r7, #4]
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	80bb      	strh	r3, [r7, #4]
  if((SerialData_Anot&0x10)==0x10) Temp=Temp|0x08;//D
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <Display_Drive+0x1d8>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	f003 0310 	and.w	r3, r3, #16
 8000ebe:	2b10      	cmp	r3, #16
 8000ec0:	d103      	bne.n	8000eca <Display_Drive+0x166>
 8000ec2:	88bb      	ldrh	r3, [r7, #4]
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	80bb      	strh	r3, [r7, #4]
  if((SerialData_Anot&0x08)==0x08) Temp=Temp|0x10;//E
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <Display_Drive+0x1d8>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d103      	bne.n	8000ee0 <Display_Drive+0x17c>
 8000ed8:	88bb      	ldrh	r3, [r7, #4]
 8000eda:	f043 0310 	orr.w	r3, r3, #16
 8000ede:	80bb      	strh	r3, [r7, #4]
  if((SerialData_Anot&0x04)==0x04) Temp=Temp|0x20;//F
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <Display_Drive+0x1d8>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d103      	bne.n	8000ef6 <Display_Drive+0x192>
 8000eee:	88bb      	ldrh	r3, [r7, #4]
 8000ef0:	f043 0320 	orr.w	r3, r3, #32
 8000ef4:	80bb      	strh	r3, [r7, #4]
  if((SerialData_Anot&0x02)==0x02) Temp=Temp|0x40;//G
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <Display_Drive+0x1d8>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d103      	bne.n	8000f0c <Display_Drive+0x1a8>
 8000f04:	88bb      	ldrh	r3, [r7, #4]
 8000f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f0a:	80bb      	strh	r3, [r7, #4]
  if((SerialData_Anot&0x01)==0x01) Temp=Temp|0x80;//DP
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <Display_Drive+0x1d8>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d103      	bne.n	8000f22 <Display_Drive+0x1be>
 8000f1a:	88bb      	ldrh	r3, [r7, #4]
 8000f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f20:	80bb      	strh	r3, [r7, #4]

  SerialData_Anot=Temp;
 8000f22:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <Display_Drive+0x1d8>)
 8000f24:	88bb      	ldrh	r3, [r7, #4]
 8000f26:	8013      	strh	r3, [r2, #0]

  for (i=0;i<8;i++)//
 8000f28:	2300      	movs	r3, #0
 8000f2a:	71fb      	strb	r3, [r7, #7]
 8000f2c:	e05b      	b.n	8000fe6 <Display_Drive+0x282>
 8000f2e:	bf00      	nop
 8000f30:	20000028 	.word	0x20000028
 8000f34:	2000002c 	.word	0x2000002c
 8000f38:	08003e0c 	.word	0x08003e0c
 8000f3c:	20000040 	.word	0x20000040
 8000f40:	08003de4 	.word	0x08003de4
 8000f44:	20000042 	.word	0x20000042
 8000f48:	48000400 	.word	0x48000400
 8000f4c:	08003e04 	.word	0x08003e04
  {
	 if((SerialData_Anot&BitTest_Table[i])!=0x00) DSP_SI_HI;
 8000f50:	4b36      	ldr	r3, [pc, #216]	; (800102c <Display_Drive+0x2c8>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	4619      	mov	r1, r3
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4a35      	ldr	r2, [pc, #212]	; (8001030 <Display_Drive+0x2cc>)
 8000f5c:	5cd3      	ldrb	r3, [r2, r3]
 8000f5e:	400b      	ands	r3, r1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d005      	beq.n	8000f70 <Display_Drive+0x20c>
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6a:	4832      	ldr	r0, [pc, #200]	; (8001034 <Display_Drive+0x2d0>)
 8000f6c:	f000 fc88 	bl	8001880 <HAL_GPIO_WritePin>
	 if((SerialData_Anot&BitTest_Table[i])==0x00) DSP_SI_LO;
 8000f70:	4b2e      	ldr	r3, [pc, #184]	; (800102c <Display_Drive+0x2c8>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	4619      	mov	r1, r3
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	4a2d      	ldr	r2, [pc, #180]	; (8001030 <Display_Drive+0x2cc>)
 8000f7c:	5cd3      	ldrb	r3, [r2, r3]
 8000f7e:	400b      	ands	r3, r1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d105      	bne.n	8000f90 <Display_Drive+0x22c>
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8a:	482a      	ldr	r0, [pc, #168]	; (8001034 <Display_Drive+0x2d0>)
 8000f8c:	f000 fc78 	bl	8001880 <HAL_GPIO_WritePin>
	 __NOP();
 8000f90:	bf00      	nop
	 __NOP();
 8000f92:	bf00      	nop
	 __NOP();
 8000f94:	bf00      	nop
	 __NOP();
 8000f96:	bf00      	nop
	 __NOP();
 8000f98:	bf00      	nop
	 __NOP();
 8000f9a:	bf00      	nop
	 	__NOP();
 8000f9c:	bf00      	nop
	 	__NOP();
 8000f9e:	bf00      	nop
	 	__NOP();
 8000fa0:	bf00      	nop
	 	__NOP();
 8000fa2:	bf00      	nop
	 DSP_CLK_HI;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2140      	movs	r1, #64	; 0x40
 8000fa8:	4822      	ldr	r0, [pc, #136]	; (8001034 <Display_Drive+0x2d0>)
 8000faa:	f000 fc69 	bl	8001880 <HAL_GPIO_WritePin>
	 __NOP();
 8000fae:	bf00      	nop
	 __NOP();
 8000fb0:	bf00      	nop
	 __NOP();
 8000fb2:	bf00      	nop
	 __NOP();
 8000fb4:	bf00      	nop
	 __NOP();
 8000fb6:	bf00      	nop
	 __NOP();
 8000fb8:	bf00      	nop
	 	__NOP();
 8000fba:	bf00      	nop
	 	__NOP();
 8000fbc:	bf00      	nop
	 	__NOP();
 8000fbe:	bf00      	nop
	 	__NOP();
 8000fc0:	bf00      	nop
	 DSP_CLK_LO;
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2140      	movs	r1, #64	; 0x40
 8000fc6:	481b      	ldr	r0, [pc, #108]	; (8001034 <Display_Drive+0x2d0>)
 8000fc8:	f000 fc5a 	bl	8001880 <HAL_GPIO_WritePin>
	 __NOP();
 8000fcc:	bf00      	nop
	 __NOP();
 8000fce:	bf00      	nop
	 __NOP();
 8000fd0:	bf00      	nop
	 __NOP();
 8000fd2:	bf00      	nop
	 __NOP();
 8000fd4:	bf00      	nop
	 __NOP();
 8000fd6:	bf00      	nop
	 	__NOP();
 8000fd8:	bf00      	nop
	 	__NOP();
 8000fda:	bf00      	nop
	 	__NOP();
 8000fdc:	bf00      	nop
	 	__NOP();
 8000fde:	bf00      	nop
  for (i=0;i<8;i++)//
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b07      	cmp	r3, #7
 8000fea:	d9b1      	bls.n	8000f50 <Display_Drive+0x1ec>
  }
//--------------------
//--------------------
  DSP_STB_HI;
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff2:	4810      	ldr	r0, [pc, #64]	; (8001034 <Display_Drive+0x2d0>)
 8000ff4:	f000 fc44 	bl	8001880 <HAL_GPIO_WritePin>
  __NOP();
 8000ff8:	bf00      	nop
  __NOP();
 8000ffa:	bf00      	nop
  __NOP();
 8000ffc:	bf00      	nop
  __NOP();
 8000ffe:	bf00      	nop
  __NOP();
 8001000:	bf00      	nop
  __NOP();
 8001002:	bf00      	nop
  __NOP();
 8001004:	bf00      	nop
  __NOP();
 8001006:	bf00      	nop
  __NOP();
 8001008:	bf00      	nop
  __NOP();
 800100a:	bf00      	nop
  __NOP();
 800100c:	bf00      	nop
  	__NOP();
 800100e:	bf00      	nop
  	__NOP();
 8001010:	bf00      	nop
  	__NOP();
 8001012:	bf00      	nop
  	__NOP();
 8001014:	bf00      	nop
  DSP_STB_LO;
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <Display_Drive+0x2d0>)
 800101e:	f000 fc2f 	bl	8001880 <HAL_GPIO_WritePin>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000040 	.word	0x20000040
 8001030:	08003e04 	.word	0x08003e04
 8001034:	48000400 	.word	0x48000400

08001038 <UnSigned_Numeric_Print>:
//-----------------------------------------------------------------------------------------------------------------//
//
//-----------------------------------------------------------------------------------------------------------------//
//POZITIF BIR DEGER ÜST DISPLAY'E BASTIRILACAKSA  BU RUTINI KULLANIYORUZ. ÖRN:UnSigned_Numeric_Print_ÜST(XX,4)
void UnSigned_Numeric_Print(uint32_t Value, uint8_t Digit, uint8_t Display)
{
 8001038:	b480      	push	{r7}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
 8001044:	4613      	mov	r3, r2
 8001046:	70bb      	strb	r3, [r7, #2]
  uint16_t		Buffer[5]; 				          // 8 bitlik 4 lü bir dizi tanimlaniyor

  Buffer[0]=0x30+(Value%10);					  // Birler Hanesi     // Buffer[x] dizisi Haneleri Ayarlaniyor
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <UnSigned_Numeric_Print+0x110>)
 800104c:	fba3 2301 	umull	r2, r3, r3, r1
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	1aca      	subs	r2, r1, r3
 800105c:	b293      	uxth	r3, r2
 800105e:	3330      	adds	r3, #48	; 0x30
 8001060:	b29b      	uxth	r3, r3
 8001062:	81bb      	strh	r3, [r7, #12]
  Buffer[1]=0x30+(Value/10)%10;					  // Onlar Hanesi      // Yazilan Value Degeri 10 Bölünüp kalani yaziliyor
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a38      	ldr	r2, [pc, #224]	; (8001148 <UnSigned_Numeric_Print+0x110>)
 8001068:	fba2 2303 	umull	r2, r3, r2, r3
 800106c:	08d9      	lsrs	r1, r3, #3
 800106e:	4b36      	ldr	r3, [pc, #216]	; (8001148 <UnSigned_Numeric_Print+0x110>)
 8001070:	fba3 2301 	umull	r2, r3, r3, r1
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	1aca      	subs	r2, r1, r3
 8001080:	b293      	uxth	r3, r2
 8001082:	3330      	adds	r3, #48	; 0x30
 8001084:	b29b      	uxth	r3, r3
 8001086:	81fb      	strh	r3, [r7, #14]
  Buffer[2]=0x30+(Value/100)%10;				  // Yüzler Hanesi     //mesela yüzler hanesine 200 yazilacak Sayi 100 e bölünür ve sonucu direk yazar ve
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a30      	ldr	r2, [pc, #192]	; (800114c <UnSigned_Numeric_Print+0x114>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	0959      	lsrs	r1, r3, #5
 8001092:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <UnSigned_Numeric_Print+0x110>)
 8001094:	fba3 2301 	umull	r2, r3, r3, r1
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	1aca      	subs	r2, r1, r3
 80010a4:	b293      	uxth	r3, r2
 80010a6:	3330      	adds	r3, #48	; 0x30
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	823b      	strh	r3, [r7, #16]

  if(Display == 0x01)
 80010ac:	78bb      	ldrb	r3, [r7, #2]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d120      	bne.n	80010f4 <UnSigned_Numeric_Print+0xbc>
  {
  	if(Digit >= 1) DisplayBuffer[2]=Buffer[0];
 80010b2:	78fb      	ldrb	r3, [r7, #3]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d004      	beq.n	80010c2 <UnSigned_Numeric_Print+0x8a>
 80010b8:	89bb      	ldrh	r3, [r7, #12]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b24      	ldr	r3, [pc, #144]	; (8001150 <UnSigned_Numeric_Print+0x118>)
 80010be:	709a      	strb	r2, [r3, #2]
 80010c0:	e002      	b.n	80010c8 <UnSigned_Numeric_Print+0x90>
  	else DisplayBuffer[2]=' ';
 80010c2:	4b23      	ldr	r3, [pc, #140]	; (8001150 <UnSigned_Numeric_Print+0x118>)
 80010c4:	2220      	movs	r2, #32
 80010c6:	709a      	strb	r2, [r3, #2]
  	if(Digit >= 2) DisplayBuffer[1]=Buffer[1];
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d904      	bls.n	80010d8 <UnSigned_Numeric_Print+0xa0>
 80010ce:	89fb      	ldrh	r3, [r7, #14]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <UnSigned_Numeric_Print+0x118>)
 80010d4:	705a      	strb	r2, [r3, #1]
 80010d6:	e002      	b.n	80010de <UnSigned_Numeric_Print+0xa6>
  	else DisplayBuffer[1]=' ';
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <UnSigned_Numeric_Print+0x118>)
 80010da:	2220      	movs	r2, #32
 80010dc:	705a      	strb	r2, [r3, #1]
  	if(Digit >= 3)DisplayBuffer[0] =Buffer[2];
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d904      	bls.n	80010ee <UnSigned_Numeric_Print+0xb6>
 80010e4:	8a3b      	ldrh	r3, [r7, #16]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <UnSigned_Numeric_Print+0x118>)
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e002      	b.n	80010f4 <UnSigned_Numeric_Print+0xbc>
  	else DisplayBuffer[0]=' ';
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <UnSigned_Numeric_Print+0x118>)
 80010f0:	2220      	movs	r2, #32
 80010f2:	701a      	strb	r2, [r3, #0]
  }

  if(Display == 0x02)
 80010f4:	78bb      	ldrb	r3, [r7, #2]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d120      	bne.n	800113c <UnSigned_Numeric_Print+0x104>
  {
  	if(Digit >= 1) DisplayBuffer[5]=Buffer[0];
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <UnSigned_Numeric_Print+0xd2>
 8001100:	89bb      	ldrh	r3, [r7, #12]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <UnSigned_Numeric_Print+0x118>)
 8001106:	715a      	strb	r2, [r3, #5]
 8001108:	e002      	b.n	8001110 <UnSigned_Numeric_Print+0xd8>
  	else DisplayBuffer[5]=' ';
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <UnSigned_Numeric_Print+0x118>)
 800110c:	2220      	movs	r2, #32
 800110e:	715a      	strb	r2, [r3, #5]
  	if(Digit >= 2) DisplayBuffer[4]=Buffer[1];
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d904      	bls.n	8001120 <UnSigned_Numeric_Print+0xe8>
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <UnSigned_Numeric_Print+0x118>)
 800111c:	711a      	strb	r2, [r3, #4]
 800111e:	e002      	b.n	8001126 <UnSigned_Numeric_Print+0xee>
  	else DisplayBuffer[4]=' ';
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <UnSigned_Numeric_Print+0x118>)
 8001122:	2220      	movs	r2, #32
 8001124:	711a      	strb	r2, [r3, #4]
  	if(Digit >= 3)DisplayBuffer[3] =Buffer[2];
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d904      	bls.n	8001136 <UnSigned_Numeric_Print+0xfe>
 800112c:	8a3b      	ldrh	r3, [r7, #16]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <UnSigned_Numeric_Print+0x118>)
 8001132:	70da      	strb	r2, [r3, #3]
  	else DisplayBuffer[3]=' ';
  }
}
 8001134:	e002      	b.n	800113c <UnSigned_Numeric_Print+0x104>
  	else DisplayBuffer[3]=' ';
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <UnSigned_Numeric_Print+0x118>)
 8001138:	2220      	movs	r2, #32
 800113a:	70da      	strb	r2, [r3, #3]
}
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	cccccccd 	.word	0xcccccccd
 800114c:	51eb851f 	.word	0x51eb851f
 8001150:	2000002c 	.word	0x2000002c

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115c:	e7fe      	b.n	800115c <Error_Handler+0x8>
	...

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_MspInit+0x44>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_MspInit+0x44>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6193      	str	r3, [r2, #24]
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_MspInit+0x44>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_MspInit+0x44>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <HAL_MspInit+0x44>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_MspInit+0x44>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001196:	2007      	movs	r0, #7
 8001198:	f000 f9cc 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000

080011a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <HAL_I2C_MspInit+0x7c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d128      	bne.n	800121c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_I2C_MspInit+0x80>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a16      	ldr	r2, [pc, #88]	; (8001228 <HAL_I2C_MspInit+0x80>)
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d4:	6153      	str	r3, [r2, #20]
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_I2C_MspInit+0x80>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e8:	2312      	movs	r3, #18
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f4:	2304      	movs	r3, #4
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	480b      	ldr	r0, [pc, #44]	; (800122c <HAL_I2C_MspInit+0x84>)
 8001200:	f000 f9cc 	bl	800159c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_I2C_MspInit+0x80>)
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_I2C_MspInit+0x80>)
 800120a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800120e:	61d3      	str	r3, [r2, #28]
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_I2C_MspInit+0x80>)
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40005400 	.word	0x40005400
 8001228:	40021000 	.word	0x40021000
 800122c:	48000400 	.word	0x48000400

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	DisplayIndex_Control();		//OK
 800127c:	f7ff fd5a 	bl	8000d34 <DisplayIndex_Control>
	Display_Drive();			//OK
 8001280:	f7ff fd70 	bl	8000d64 <Display_Drive>
	//SysTick_Key_Input();
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001284:	f000 f884 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b4:	f7ff ffea 	bl	800128c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <LoopForever+0x6>)
  ldr r1, =_edata
 80012ba:	490d      	ldr	r1, [pc, #52]	; (80012f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <LoopForever+0xe>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d0:	4c0a      	ldr	r4, [pc, #40]	; (80012fc <LoopForever+0x16>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012de:	f002 fd51 	bl	8003d84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012e2:	f7ff fb5f 	bl	80009a4 <main>

080012e6 <LoopForever>:

LoopForever:
    b LoopForever
 80012e6:	e7fe      	b.n	80012e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012e8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012f4:	08003ec4 	.word	0x08003ec4
  ldr r2, =_sbss
 80012f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012fc:	200000a8 	.word	0x200000a8

08001300 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC1_IRQHandler>
	...

08001304 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_Init+0x28>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_Init+0x28>)
 800130e:	f043 0310 	orr.w	r3, r3, #16
 8001312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f000 f90d 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f808 	bl	8001330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001320:	f7ff ff1e 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40022000 	.word	0x40022000

08001330 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x54>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x58>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	fbb3 f3f1 	udiv	r3, r3, r1
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f917 	bl	8001582 <HAL_SYSTICK_Config>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00e      	b.n	800137c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d80a      	bhi.n	800137a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f000 f8ed 	bl	800154a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_InitTick+0x5c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000000 	.word	0x20000000
 8001388:	20000008 	.word	0x20000008
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x20>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_IncTick+0x24>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000008 	.word	0x20000008
 80013b4:	200000a4 	.word	0x200000a4

080013b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200000a4 	.word	0x200000a4

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001500:	d301      	bcc.n	8001506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001502:	2301      	movs	r3, #1
 8001504:	e00f      	b.n	8001526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <SysTick_Config+0x40>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150e:	210f      	movs	r1, #15
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f7ff ff8e 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <SysTick_Config+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SysTick_Config+0x40>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff47 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800155c:	f7ff ff5c 	bl	8001418 <__NVIC_GetPriorityGrouping>
 8001560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff ff8e 	bl	8001488 <NVIC_EncodePriority>
 800156c:	4602      	mov	r2, r0
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff5d 	bl	8001434 <__NVIC_SetPriority>
}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffb0 	bl	80014f0 <SysTick_Config>
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015aa:	e14e      	b.n	800184a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8140 	beq.w	8001844 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d005      	beq.n	80015dc <HAL_GPIO_Init+0x40>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d130      	bne.n	800163e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001612:	2201      	movs	r2, #1
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	f003 0201 	and.w	r2, r3, #1
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b03      	cmp	r3, #3
 8001648:	d017      	beq.n	800167a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	2203      	movs	r2, #3
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d123      	bne.n	80016ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	08da      	lsrs	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3208      	adds	r2, #8
 800168e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	220f      	movs	r2, #15
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	08da      	lsrs	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3208      	adds	r2, #8
 80016c8:	6939      	ldr	r1, [r7, #16]
 80016ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0203 	and.w	r2, r3, #3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 809a 	beq.w	8001844 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001710:	4b55      	ldr	r3, [pc, #340]	; (8001868 <HAL_GPIO_Init+0x2cc>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a54      	ldr	r2, [pc, #336]	; (8001868 <HAL_GPIO_Init+0x2cc>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b52      	ldr	r3, [pc, #328]	; (8001868 <HAL_GPIO_Init+0x2cc>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001728:	4a50      	ldr	r2, [pc, #320]	; (800186c <HAL_GPIO_Init+0x2d0>)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	220f      	movs	r2, #15
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001752:	d013      	beq.n	800177c <HAL_GPIO_Init+0x1e0>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a46      	ldr	r2, [pc, #280]	; (8001870 <HAL_GPIO_Init+0x2d4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d00d      	beq.n	8001778 <HAL_GPIO_Init+0x1dc>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a45      	ldr	r2, [pc, #276]	; (8001874 <HAL_GPIO_Init+0x2d8>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d007      	beq.n	8001774 <HAL_GPIO_Init+0x1d8>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a44      	ldr	r2, [pc, #272]	; (8001878 <HAL_GPIO_Init+0x2dc>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d101      	bne.n	8001770 <HAL_GPIO_Init+0x1d4>
 800176c:	2303      	movs	r3, #3
 800176e:	e006      	b.n	800177e <HAL_GPIO_Init+0x1e2>
 8001770:	2305      	movs	r3, #5
 8001772:	e004      	b.n	800177e <HAL_GPIO_Init+0x1e2>
 8001774:	2302      	movs	r3, #2
 8001776:	e002      	b.n	800177e <HAL_GPIO_Init+0x1e2>
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <HAL_GPIO_Init+0x1e2>
 800177c:	2300      	movs	r3, #0
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	f002 0203 	and.w	r2, r2, #3
 8001784:	0092      	lsls	r2, r2, #2
 8001786:	4093      	lsls	r3, r2
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800178e:	4937      	ldr	r1, [pc, #220]	; (800186c <HAL_GPIO_Init+0x2d0>)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179c:	4b37      	ldr	r3, [pc, #220]	; (800187c <HAL_GPIO_Init+0x2e0>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017c0:	4a2e      	ldr	r2, [pc, #184]	; (800187c <HAL_GPIO_Init+0x2e0>)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <HAL_GPIO_Init+0x2e0>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017ea:	4a24      	ldr	r2, [pc, #144]	; (800187c <HAL_GPIO_Init+0x2e0>)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017f0:	4b22      	ldr	r3, [pc, #136]	; (800187c <HAL_GPIO_Init+0x2e0>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001814:	4a19      	ldr	r2, [pc, #100]	; (800187c <HAL_GPIO_Init+0x2e0>)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <HAL_GPIO_Init+0x2e0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800183e:	4a0f      	ldr	r2, [pc, #60]	; (800187c <HAL_GPIO_Init+0x2e0>)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	fa22 f303 	lsr.w	r3, r2, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	f47f aea9 	bne.w	80015ac <HAL_GPIO_Init+0x10>
  }
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40021000 	.word	0x40021000
 800186c:	40010000 	.word	0x40010000
 8001870:	48000400 	.word	0x48000400
 8001874:	48000800 	.word	0x48000800
 8001878:	48000c00 	.word	0x48000c00
 800187c:	40010400 	.word	0x40010400

08001880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]
 800188c:	4613      	mov	r3, r2
 800188e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001890:	787b      	ldrb	r3, [r7, #1]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001896:	887a      	ldrh	r2, [r7, #2]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800189c:	e002      	b.n	80018a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e081      	b.n	80019c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d106      	bne.n	80018dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fc66 	bl	80011a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2224      	movs	r2, #36	; 0x24
 80018e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001900:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001910:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d107      	bne.n	800192a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	e006      	b.n	8001938 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001936:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d104      	bne.n	800194a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001948:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800195c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800196c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69d9      	ldr	r1, [r3, #28]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1a      	ldr	r2, [r3, #32]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2220      	movs	r2, #32
 80019b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	461a      	mov	r2, r3
 80019dc:	460b      	mov	r3, r1
 80019de:	817b      	strh	r3, [r7, #10]
 80019e0:	4613      	mov	r3, r2
 80019e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b20      	cmp	r3, #32
 80019ee:	f040 80da 	bne.w	8001ba6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_I2C_Master_Transmit+0x30>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e0d3      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x1d8>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a08:	f7ff fcd6 	bl	80013b8 <HAL_GetTick>
 8001a0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2319      	movs	r3, #25
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 faef 	bl	8001ffe <I2C_WaitOnFlagUntilTimeout>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0be      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2221      	movs	r2, #33	; 0x21
 8001a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2210      	movs	r2, #16
 8001a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	893a      	ldrh	r2, [r7, #8]
 8001a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	2bff      	cmp	r3, #255	; 0xff
 8001a5a:	d90e      	bls.n	8001a7a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	22ff      	movs	r2, #255	; 0xff
 8001a60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	8979      	ldrh	r1, [r7, #10]
 8001a6a:	4b51      	ldr	r3, [pc, #324]	; (8001bb0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 fcfe 	bl	8002474 <I2C_TransferConfig>
 8001a78:	e06c      	b.n	8001b54 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	8979      	ldrh	r1, [r7, #10]
 8001a8c:	4b48      	ldr	r3, [pc, #288]	; (8001bb0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 fced 	bl	8002474 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a9a:	e05b      	b.n	8001b54 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	6a39      	ldr	r1, [r7, #32]
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fafb 	bl	800209c <I2C_WaitOnTXISFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e07b      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d034      	beq.n	8001b54 <HAL_I2C_Master_Transmit+0x184>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d130      	bne.n	8001b54 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	2200      	movs	r2, #0
 8001afa:	2180      	movs	r1, #128	; 0x80
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 fa7e 	bl	8001ffe <I2C_WaitOnFlagUntilTimeout>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e04d      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2bff      	cmp	r3, #255	; 0xff
 8001b14:	d90e      	bls.n	8001b34 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	22ff      	movs	r2, #255	; 0xff
 8001b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	8979      	ldrh	r1, [r7, #10]
 8001b24:	2300      	movs	r3, #0
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 fca1 	bl	8002474 <I2C_TransferConfig>
 8001b32:	e00f      	b.n	8001b54 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	8979      	ldrh	r1, [r7, #10]
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fc90 	bl	8002474 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d19e      	bne.n	8001a9c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	6a39      	ldr	r1, [r7, #32]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 fae1 	bl	800212a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e01a      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2220      	movs	r2, #32
 8001b78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6859      	ldr	r1, [r3, #4]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_I2C_Master_Transmit+0x1e4>)
 8001b86:	400b      	ands	r3, r1
 8001b88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001ba6:	2302      	movs	r3, #2
  }
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	80002000 	.word	0x80002000
 8001bb4:	fe00e800 	.word	0xfe00e800

08001bb8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	817b      	strh	r3, [r7, #10]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b20      	cmp	r3, #32
 8001bd6:	f040 80db 	bne.w	8001d90 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_I2C_Master_Receive+0x30>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e0d4      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bf0:	f7ff fbe2 	bl	80013b8 <HAL_GetTick>
 8001bf4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2319      	movs	r3, #25
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f9fb 	bl	8001ffe <I2C_WaitOnFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0bf      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2222      	movs	r2, #34	; 0x22
 8001c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	893a      	ldrh	r2, [r7, #8]
 8001c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2bff      	cmp	r3, #255	; 0xff
 8001c42:	d90e      	bls.n	8001c62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	22ff      	movs	r2, #255	; 0xff
 8001c48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	8979      	ldrh	r1, [r7, #10]
 8001c52:	4b52      	ldr	r3, [pc, #328]	; (8001d9c <HAL_I2C_Master_Receive+0x1e4>)
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fc0a 	bl	8002474 <I2C_TransferConfig>
 8001c60:	e06d      	b.n	8001d3e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	8979      	ldrh	r1, [r7, #10]
 8001c74:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <HAL_I2C_Master_Receive+0x1e4>)
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 fbf9 	bl	8002474 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001c82:	e05c      	b.n	8001d3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	6a39      	ldr	r1, [r7, #32]
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 fa91 	bl	80021b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e07c      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d034      	beq.n	8001d3e <HAL_I2C_Master_Receive+0x186>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d130      	bne.n	8001d3e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2180      	movs	r1, #128	; 0x80
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f989 	bl	8001ffe <I2C_WaitOnFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e04d      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2bff      	cmp	r3, #255	; 0xff
 8001cfe:	d90e      	bls.n	8001d1e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	22ff      	movs	r2, #255	; 0xff
 8001d04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	8979      	ldrh	r1, [r7, #10]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fbac 	bl	8002474 <I2C_TransferConfig>
 8001d1c:	e00f      	b.n	8001d3e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	8979      	ldrh	r1, [r7, #10]
 8001d30:	2300      	movs	r3, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 fb9b 	bl	8002474 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d19d      	bne.n	8001c84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	6a39      	ldr	r1, [r7, #32]
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f9ec 	bl	800212a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e01a      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2220      	movs	r2, #32
 8001d62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6859      	ldr	r1, [r3, #4]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_I2C_Master_Receive+0x1e8>)
 8001d70:	400b      	ands	r3, r1
 8001d72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e000      	b.n	8001d92 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001d90:	2302      	movs	r3, #2
  }
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	80002400 	.word	0x80002400
 8001da0:	fe00e800 	.word	0xfe00e800

08001da4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	460b      	mov	r3, r1
 8001db2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	f040 80f3 	bne.w	8001fac <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd4:	d101      	bne.n	8001dda <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e0e9      	b.n	8001fae <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_I2C_IsDeviceReady+0x44>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e0e2      	b.n	8001fae <HAL_I2C_IsDeviceReady+0x20a>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2224      	movs	r2, #36	; 0x24
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_I2C_IsDeviceReady+0x72>
 8001e06:	897b      	ldrh	r3, [r7, #10]
 8001e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e14:	e006      	b.n	8001e24 <HAL_I2C_IsDeviceReady+0x80>
 8001e16:	897b      	ldrh	r3, [r7, #10]
 8001e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e20:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001e2a:	f7ff fac5 	bl	80013b8 <HAL_GetTick>
 8001e2e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	bf0c      	ite	eq
 8001e3e:	2301      	moveq	r3, #1
 8001e40:	2300      	movne	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b10      	cmp	r3, #16
 8001e52:	bf0c      	ite	eq
 8001e54:	2301      	moveq	r3, #1
 8001e56:	2300      	movne	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001e5c:	e034      	b.n	8001ec8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d01a      	beq.n	8001e9c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e66:	f7ff faa7 	bl	80013b8 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d302      	bcc.n	8001e7c <HAL_I2C_IsDeviceReady+0xd8>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10f      	bne.n	8001e9c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e88:	f043 0220 	orr.w	r2, r3, #32
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e088      	b.n	8001fae <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	bf0c      	ite	eq
 8001eaa:	2301      	moveq	r3, #1
 8001eac:	2300      	movne	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	2b10      	cmp	r3, #16
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ec8:	7ffb      	ldrb	r3, [r7, #31]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <HAL_I2C_IsDeviceReady+0x130>
 8001ece:	7fbb      	ldrb	r3, [r7, #30]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0c4      	beq.n	8001e5e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d01a      	beq.n	8001f18 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2120      	movs	r1, #32
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f886 	bl	8001ffe <I2C_WaitOnFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e058      	b.n	8001fae <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2220      	movs	r2, #32
 8001f02:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	e04a      	b.n	8001fae <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2120      	movs	r1, #32
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 f86b 	bl	8001ffe <I2C_WaitOnFlagUntilTimeout>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e03d      	b.n	8001fae <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2210      	movs	r2, #16
 8001f38:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d118      	bne.n	8001f7c <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f58:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2200      	movs	r2, #0
 8001f62:	2120      	movs	r1, #32
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f84a 	bl	8001ffe <I2C_WaitOnFlagUntilTimeout>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e01c      	b.n	8001fae <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	f63f af39 	bhi.w	8001dfe <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	f043 0220 	orr.w	r2, r3, #32
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001fac:	2302      	movs	r3, #2
  }
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3720      	adds	r7, #32
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d103      	bne.n	8001fd4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d007      	beq.n	8001ff2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699a      	ldr	r2, [r3, #24]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	619a      	str	r2, [r3, #24]
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	4613      	mov	r3, r2
 800200c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800200e:	e031      	b.n	8002074 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002016:	d02d      	beq.n	8002074 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002018:	f7ff f9ce 	bl	80013b8 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d302      	bcc.n	800202e <I2C_WaitOnFlagUntilTimeout+0x30>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d122      	bne.n	8002074 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699a      	ldr	r2, [r3, #24]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4013      	ands	r3, r2
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	429a      	cmp	r2, r3
 800203c:	bf0c      	ite	eq
 800203e:	2301      	moveq	r3, #1
 8002040:	2300      	movne	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	429a      	cmp	r2, r3
 800204a:	d113      	bne.n	8002074 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	f043 0220 	orr.w	r2, r3, #32
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e00f      	b.n	8002094 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4013      	ands	r3, r2
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	429a      	cmp	r2, r3
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	429a      	cmp	r2, r3
 8002090:	d0be      	beq.n	8002010 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020a8:	e033      	b.n	8002112 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f900 	bl	80022b4 <I2C_IsErrorOccurred>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e031      	b.n	8002122 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d025      	beq.n	8002112 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c6:	f7ff f977 	bl	80013b8 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d302      	bcc.n	80020dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d11a      	bne.n	8002112 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d013      	beq.n	8002112 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f043 0220 	orr.w	r2, r3, #32
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e007      	b.n	8002122 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b02      	cmp	r3, #2
 800211e:	d1c4      	bne.n	80020aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002136:	e02f      	b.n	8002198 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 f8b9 	bl	80022b4 <I2C_IsErrorOccurred>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e02d      	b.n	80021a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214c:	f7ff f934 	bl	80013b8 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	429a      	cmp	r2, r3
 800215a:	d302      	bcc.n	8002162 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d11a      	bne.n	8002198 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b20      	cmp	r3, #32
 800216e:	d013      	beq.n	8002198 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	f043 0220 	orr.w	r2, r3, #32
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e007      	b.n	80021a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d1c8      	bne.n	8002138 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021bc:	e06b      	b.n	8002296 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f876 	bl	80022b4 <I2C_IsErrorOccurred>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e069      	b.n	80022a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d138      	bne.n	8002252 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d105      	bne.n	80021fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e055      	b.n	80022a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b10      	cmp	r3, #16
 8002206:	d107      	bne.n	8002218 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2210      	movs	r2, #16
 800220e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2204      	movs	r2, #4
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
 8002216:	e002      	b.n	800221e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2220      	movs	r2, #32
 8002224:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002232:	400b      	ands	r3, r1
 8002234:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e029      	b.n	80022a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002252:	f7ff f8b1 	bl	80013b8 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	429a      	cmp	r2, r3
 8002260:	d302      	bcc.n	8002268 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d116      	bne.n	8002296 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b04      	cmp	r3, #4
 8002274:	d00f      	beq.n	8002296 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f043 0220 	orr.w	r2, r3, #32
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2220      	movs	r2, #32
 8002286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e007      	b.n	80022a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d18c      	bne.n	80021be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	fe00e800 	.word	0xfe00e800

080022b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d068      	beq.n	80023b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2210      	movs	r2, #16
 80022e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022e8:	e049      	b.n	800237e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d045      	beq.n	800237e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022f2:	f7ff f861 	bl	80013b8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d302      	bcc.n	8002308 <I2C_IsErrorOccurred+0x54>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d13a      	bne.n	800237e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002312:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800231a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800232a:	d121      	bne.n	8002370 <I2C_IsErrorOccurred+0xbc>
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002332:	d01d      	beq.n	8002370 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	2b20      	cmp	r3, #32
 8002338:	d01a      	beq.n	8002370 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002348:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800234a:	f7ff f835 	bl	80013b8 <HAL_GetTick>
 800234e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002350:	e00e      	b.n	8002370 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002352:	f7ff f831 	bl	80013b8 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b19      	cmp	r3, #25
 800235e:	d907      	bls.n	8002370 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	f043 0320 	orr.w	r3, r3, #32
 8002366:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800236e:	e006      	b.n	800237e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b20      	cmp	r3, #32
 800237c:	d1e9      	bne.n	8002352 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b20      	cmp	r3, #32
 800238a:	d003      	beq.n	8002394 <I2C_IsErrorOccurred+0xe0>
 800238c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0aa      	beq.n	80022ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002398:	2b00      	cmp	r3, #0
 800239a:	d103      	bne.n	80023a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2220      	movs	r2, #32
 80023a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00b      	beq.n	80023dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	f043 0308 	orr.w	r3, r3, #8
 80023ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00b      	beq.n	8002420 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	f043 0302 	orr.w	r3, r3, #2
 800240e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002418:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01c      	beq.n	8002462 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f7ff fdc4 	bl	8001fb6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <I2C_IsErrorOccurred+0x1bc>)
 800243a:	400b      	ands	r3, r1
 800243c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	431a      	orrs	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002466:	4618      	mov	r0, r3
 8002468:	3728      	adds	r7, #40	; 0x28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	fe00e800 	.word	0xfe00e800

08002474 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	817b      	strh	r3, [r7, #10]
 8002482:	4613      	mov	r3, r2
 8002484:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002486:	897b      	ldrh	r3, [r7, #10]
 8002488:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800248c:	7a7b      	ldrb	r3, [r7, #9]
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002494:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	4313      	orrs	r3, r2
 800249e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	0d5b      	lsrs	r3, r3, #21
 80024ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <I2C_TransferConfig+0x60>)
 80024b4:	430b      	orrs	r3, r1
 80024b6:	43db      	mvns	r3, r3
 80024b8:	ea02 0103 	and.w	r1, r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	03ff63ff 	.word	0x03ff63ff

080024d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d138      	bne.n	8002560 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e032      	b.n	8002562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2224      	movs	r2, #36	; 0x24
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800252a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6819      	ldr	r1, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	e000      	b.n	8002562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002560:	2302      	movs	r3, #2
  }
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800256e:	b480      	push	{r7}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b20      	cmp	r3, #32
 8002582:	d139      	bne.n	80025f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800258e:	2302      	movs	r3, #2
 8002590:	e033      	b.n	80025fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2224      	movs	r2, #36	; 0x24
 800259e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e000      	b.n	80025fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025f8:	2302      	movs	r3, #2
  }
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800260e:	af00      	add	r7, sp, #0
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002618:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	f001 b823 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 817d 	beq.w	800293e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002644:	4bbc      	ldr	r3, [pc, #752]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b04      	cmp	r3, #4
 800264e:	d00c      	beq.n	800266a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002650:	4bb9      	ldr	r3, [pc, #740]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b08      	cmp	r3, #8
 800265a:	d15c      	bne.n	8002716 <HAL_RCC_OscConfig+0x10e>
 800265c:	4bb6      	ldr	r3, [pc, #728]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002668:	d155      	bne.n	8002716 <HAL_RCC_OscConfig+0x10e>
 800266a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800266e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800267e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	095b      	lsrs	r3, r3, #5
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d102      	bne.n	800269c <HAL_RCC_OscConfig+0x94>
 8002696:	4ba8      	ldr	r3, [pc, #672]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	e015      	b.n	80026c8 <HAL_RCC_OscConfig+0xc0>
 800269c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80026b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026b4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80026b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80026c4:	4b9c      	ldr	r3, [pc, #624]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026cc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80026d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80026d4:	fa92 f2a2 	rbit	r2, r2
 80026d8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80026dc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80026e0:	fab2 f282 	clz	r2, r2
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f042 0220 	orr.w	r2, r2, #32
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	f002 021f 	and.w	r2, r2, #31
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f202 	lsl.w	r2, r1, r2
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 811f 	beq.w	800293c <HAL_RCC_OscConfig+0x334>
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 8116 	bne.w	800293c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	f000 bfaf 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x12e>
 8002728:	4b83      	ldr	r3, [pc, #524]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a82      	ldr	r2, [pc, #520]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800272e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	e036      	b.n	80027a4 <HAL_RCC_OscConfig+0x19c>
 8002736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x158>
 8002746:	4b7c      	ldr	r3, [pc, #496]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7b      	ldr	r2, [pc, #492]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800274c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b79      	ldr	r3, [pc, #484]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a78      	ldr	r2, [pc, #480]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e021      	b.n	80027a4 <HAL_RCC_OscConfig+0x19c>
 8002760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002764:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x184>
 8002772:	4b71      	ldr	r3, [pc, #452]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a70      	ldr	r2, [pc, #448]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b6e      	ldr	r3, [pc, #440]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6d      	ldr	r2, [pc, #436]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0x19c>
 800278c:	4b6a      	ldr	r3, [pc, #424]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a69      	ldr	r2, [pc, #420]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 8002792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b67      	ldr	r3, [pc, #412]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a66      	ldr	r2, [pc, #408]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800279e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027a4:	4b64      	ldr	r3, [pc, #400]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	f023 020f 	bic.w	r2, r3, #15
 80027ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	495f      	ldr	r1, [pc, #380]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d059      	beq.n	8002882 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7fe fdf3 	bl	80013b8 <HAL_GetTick>
 80027d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fdee 	bl	80013b8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b64      	cmp	r3, #100	; 0x64
 80027e6:	d902      	bls.n	80027ee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	f000 bf43 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 80027ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002802:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d102      	bne.n	8002820 <HAL_RCC_OscConfig+0x218>
 800281a:	4b47      	ldr	r3, [pc, #284]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	e015      	b.n	800284c <HAL_RCC_OscConfig+0x244>
 8002820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002824:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002838:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800283c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002848:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002850:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002854:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002858:	fa92 f2a2 	rbit	r2, r2
 800285c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002860:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002864:	fab2 f282 	clz	r2, r2
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f042 0220 	orr.w	r2, r2, #32
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f002 021f 	and.w	r2, r2, #31
 8002874:	2101      	movs	r1, #1
 8002876:	fa01 f202 	lsl.w	r2, r1, r2
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ab      	beq.n	80027d8 <HAL_RCC_OscConfig+0x1d0>
 8002880:	e05d      	b.n	800293e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fe fd99 	bl	80013b8 <HAL_GetTick>
 8002886:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800288c:	f7fe fd94 	bl	80013b8 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b64      	cmp	r3, #100	; 0x64
 800289a:	d902      	bls.n	80028a2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	f000 bee9 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 80028a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028a6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80028b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d102      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2cc>
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	e015      	b.n	8002900 <HAL_RCC_OscConfig+0x2f8>
 80028d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028d8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80028f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <HAL_RCC_OscConfig+0x330>)
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002904:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002908:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800290c:	fa92 f2a2 	rbit	r2, r2
 8002910:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002914:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002918:	fab2 f282 	clz	r2, r2
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	f042 0220 	orr.w	r2, r2, #32
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	f002 021f 	and.w	r2, r2, #31
 8002928:	2101      	movs	r1, #1
 800292a:	fa01 f202 	lsl.w	r2, r1, r2
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ab      	bne.n	800288c <HAL_RCC_OscConfig+0x284>
 8002934:	e003      	b.n	800293e <HAL_RCC_OscConfig+0x336>
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 817d 	beq.w	8002c4e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002954:	4ba6      	ldr	r3, [pc, #664]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002960:	4ba3      	ldr	r3, [pc, #652]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	2b08      	cmp	r3, #8
 800296a:	d172      	bne.n	8002a52 <HAL_RCC_OscConfig+0x44a>
 800296c:	4ba0      	ldr	r3, [pc, #640]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d16c      	bne.n	8002a52 <HAL_RCC_OscConfig+0x44a>
 8002978:	2302      	movs	r3, #2
 800297a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800298a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d102      	bne.n	80029a8 <HAL_RCC_OscConfig+0x3a0>
 80029a2:	4b93      	ldr	r3, [pc, #588]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	e013      	b.n	80029d0 <HAL_RCC_OscConfig+0x3c8>
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80029ba:	2302      	movs	r3, #2
 80029bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80029cc:	4b88      	ldr	r3, [pc, #544]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	2202      	movs	r2, #2
 80029d2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80029d6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80029da:	fa92 f2a2 	rbit	r2, r2
 80029de:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80029e2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80029e6:	fab2 f282 	clz	r2, r2
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	f042 0220 	orr.w	r2, r2, #32
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	f002 021f 	and.w	r2, r2, #31
 80029f6:	2101      	movs	r1, #1
 80029f8:	fa01 f202 	lsl.w	r2, r1, r2
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCC_OscConfig+0x410>
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d002      	beq.n	8002a18 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f000 be2e 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	4b75      	ldr	r3, [pc, #468]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	21f8      	movs	r1, #248	; 0xf8
 8002a2e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a36:	fa91 f1a1 	rbit	r1, r1
 8002a3a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002a3e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002a42:	fab1 f181 	clz	r1, r1
 8002a46:	b2c9      	uxtb	r1, r1
 8002a48:	408b      	lsls	r3, r1
 8002a4a:	4969      	ldr	r1, [pc, #420]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a50:	e0fd      	b.n	8002c4e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8088 	beq.w	8002b74 <HAL_RCC_OscConfig+0x56c>
 8002a64:	2301      	movs	r3, #1
 8002a66:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a90:	f7fe fc92 	bl	80013b8 <HAL_GetTick>
 8002a94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	e00a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9a:	f7fe fc8d 	bl	80013b8 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d902      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	f000 bde2 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002ac2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d102      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x4d8>
 8002ada:	4b45      	ldr	r3, [pc, #276]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	e013      	b.n	8002b08 <HAL_RCC_OscConfig+0x500>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002af2:	2302      	movs	r3, #2
 8002af4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002af8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002b04:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002b0e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b12:	fa92 f2a2 	rbit	r2, r2
 8002b16:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002b1a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b1e:	fab2 f282 	clz	r2, r2
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	f042 0220 	orr.w	r2, r2, #32
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	f002 021f 	and.w	r2, r2, #31
 8002b2e:	2101      	movs	r1, #1
 8002b30:	fa01 f202 	lsl.w	r2, r1, r2
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0af      	beq.n	8002a9a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	21f8      	movs	r1, #248	; 0xf8
 8002b50:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b58:	fa91 f1a1 	rbit	r1, r1
 8002b5c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b60:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b64:	fab1 f181 	clz	r1, r1
 8002b68:	b2c9      	uxtb	r1, r1
 8002b6a:	408b      	lsls	r3, r1
 8002b6c:	4920      	ldr	r1, [pc, #128]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]
 8002b72:	e06c      	b.n	8002c4e <HAL_RCC_OscConfig+0x646>
 8002b74:	2301      	movs	r3, #1
 8002b76:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fc0a 	bl	80013b8 <HAL_GetTick>
 8002ba4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002baa:	f7fe fc05 	bl	80013b8 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d902      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	f000 bd5a 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d104      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5ec>
 8002bea:	4b01      	ldr	r3, [pc, #4]	; (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	e015      	b.n	8002c1c <HAL_RCC_OscConfig+0x614>
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c06:	2302      	movs	r3, #2
 8002c08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c18:	4bc8      	ldr	r3, [pc, #800]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002c22:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c26:	fa92 f2a2 	rbit	r2, r2
 8002c2a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002c2e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c32:	fab2 f282 	clz	r2, r2
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	f042 0220 	orr.w	r2, r2, #32
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	f002 021f 	and.w	r2, r2, #31
 8002c42:	2101      	movs	r1, #1
 8002c44:	fa01 f202 	lsl.w	r2, r1, r2
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1ad      	bne.n	8002baa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 8110 	beq.w	8002e84 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d079      	beq.n	8002d68 <HAL_RCC_OscConfig+0x760>
 8002c74:	2301      	movs	r3, #1
 8002c76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	4bab      	ldr	r3, [pc, #684]	; (8002f40 <HAL_RCC_OscConfig+0x938>)
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fb8b 	bl	80013b8 <HAL_GetTick>
 8002ca2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca8:	f7fe fb86 	bl	80013b8 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d902      	bls.n	8002cbe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	f000 bcdb 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cd8:	2202      	movs	r2, #2
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	fa93 f2a3 	rbit	r2, r3
 8002cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	fa93 f2a3 	rbit	r2, r3
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d18:	4b88      	ldr	r3, [pc, #544]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d24:	2102      	movs	r1, #2
 8002d26:	6019      	str	r1, [r3, #0]
 8002d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	fa93 f1a3 	rbit	r1, r3
 8002d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d3e:	6019      	str	r1, [r3, #0]
  return result;
 8002d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d44:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0a0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x6a0>
 8002d66:	e08d      	b.n	8002e84 <HAL_RCC_OscConfig+0x87c>
 8002d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	fa93 f2a3 	rbit	r2, r3
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d8a:	601a      	str	r2, [r3, #0]
  return result;
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d94:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_OscConfig+0x938>)
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	461a      	mov	r2, r3
 8002da6:	2300      	movs	r3, #0
 8002da8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fe fb05 	bl	80013b8 <HAL_GetTick>
 8002dae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db2:	e00a      	b.n	8002dca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fe fb00 	bl	80013b8 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d902      	bls.n	8002dca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	f000 bc55 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	fa93 f2a3 	rbit	r2, r3
 8002de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002df6:	2202      	movs	r2, #2
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	fa93 f2a3 	rbit	r2, r3
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	fa93 f2a3 	rbit	r2, r3
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e36:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e42:	2102      	movs	r1, #2
 8002e44:	6019      	str	r1, [r3, #0]
 8002e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	fa93 f1a3 	rbit	r1, r3
 8002e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e5c:	6019      	str	r1, [r3, #0]
  return result;
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d197      	bne.n	8002db4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 81a1 	beq.w	80031dc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea0:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d116      	bne.n	8002eda <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eac:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4a22      	ldr	r2, [pc, #136]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	61d3      	str	r3, [r2, #28]
 8002eb8:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ed2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <HAL_RCC_OscConfig+0x93c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d11a      	bne.n	8002f1c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <HAL_RCC_OscConfig+0x93c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a16      	ldr	r2, [pc, #88]	; (8002f44 <HAL_RCC_OscConfig+0x93c>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fa61 	bl	80013b8 <HAL_GetTick>
 8002ef6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efa:	e009      	b.n	8002f10 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efc:	f7fe fa5c 	bl	80013b8 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b64      	cmp	r3, #100	; 0x64
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e3b1      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <HAL_RCC_OscConfig+0x93c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ef      	beq.n	8002efc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d10d      	bne.n	8002f48 <HAL_RCC_OscConfig+0x940>
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	4a02      	ldr	r2, [pc, #8]	; (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6213      	str	r3, [r2, #32]
 8002f38:	e03c      	b.n	8002fb4 <HAL_RCC_OscConfig+0x9ac>
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	10908120 	.word	0x10908120
 8002f44:	40007000 	.word	0x40007000
 8002f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10c      	bne.n	8002f72 <HAL_RCC_OscConfig+0x96a>
 8002f58:	4bc1      	ldr	r3, [pc, #772]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4ac0      	ldr	r2, [pc, #768]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f5e:	f023 0301 	bic.w	r3, r3, #1
 8002f62:	6213      	str	r3, [r2, #32]
 8002f64:	4bbe      	ldr	r3, [pc, #760]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4abd      	ldr	r2, [pc, #756]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f6a:	f023 0304 	bic.w	r3, r3, #4
 8002f6e:	6213      	str	r3, [r2, #32]
 8002f70:	e020      	b.n	8002fb4 <HAL_RCC_OscConfig+0x9ac>
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b05      	cmp	r3, #5
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x994>
 8002f82:	4bb7      	ldr	r3, [pc, #732]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4ab6      	ldr	r2, [pc, #728]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f88:	f043 0304 	orr.w	r3, r3, #4
 8002f8c:	6213      	str	r3, [r2, #32]
 8002f8e:	4bb4      	ldr	r3, [pc, #720]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	4ab3      	ldr	r2, [pc, #716]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6213      	str	r3, [r2, #32]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCC_OscConfig+0x9ac>
 8002f9c:	4bb0      	ldr	r3, [pc, #704]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4aaf      	ldr	r2, [pc, #700]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	6213      	str	r3, [r2, #32]
 8002fa8:	4bad      	ldr	r3, [pc, #692]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4aac      	ldr	r2, [pc, #688]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002fae:	f023 0304 	bic.w	r3, r3, #4
 8002fb2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8081 	beq.w	80030c8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe f9f7 	bl	80013b8 <HAL_GetTick>
 8002fca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe f9f2 	bl	80013b8 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e345      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fa93 f2a3 	rbit	r2, r3
 8003002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003006:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003010:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003014:	2202      	movs	r2, #2
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800302e:	601a      	str	r2, [r3, #0]
  return result;
 8003030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003034:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003038:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d102      	bne.n	8003054 <HAL_RCC_OscConfig+0xa4c>
 800304e:	4b84      	ldr	r3, [pc, #528]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	e013      	b.n	800307c <HAL_RCC_OscConfig+0xa74>
 8003054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003058:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800305c:	2202      	movs	r2, #2
 800305e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003064:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	fa93 f2a3 	rbit	r2, r3
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	4b79      	ldr	r3, [pc, #484]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003080:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003084:	2102      	movs	r1, #2
 8003086:	6011      	str	r1, [r2, #0]
 8003088:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800308c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	fa92 f1a2 	rbit	r1, r2
 8003096:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800309a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800309e:	6011      	str	r1, [r2, #0]
  return result;
 80030a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030a4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	fab2 f282 	clz	r2, r2
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	f002 021f 	and.w	r2, r2, #31
 80030ba:	2101      	movs	r1, #1
 80030bc:	fa01 f202 	lsl.w	r2, r1, r2
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d084      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x9c8>
 80030c6:	e07f      	b.n	80031c8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fe f976 	bl	80013b8 <HAL_GetTick>
 80030cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d0:	e00b      	b.n	80030ea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fe f971 	bl	80013b8 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e2c4      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
 80030ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80030f2:	2202      	movs	r2, #2
 80030f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	fa93 f2a3 	rbit	r2, r3
 8003104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003108:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003116:	2202      	movs	r2, #2
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	fa93 f2a3 	rbit	r2, r3
 8003128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003130:	601a      	str	r2, [r3, #0]
  return result;
 8003132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003136:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800313a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f043 0302 	orr.w	r3, r3, #2
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d102      	bne.n	8003156 <HAL_RCC_OscConfig+0xb4e>
 8003150:	4b43      	ldr	r3, [pc, #268]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	e013      	b.n	800317e <HAL_RCC_OscConfig+0xb76>
 8003156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800315e:	2202      	movs	r2, #2
 8003160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003166:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa93 f2a3 	rbit	r2, r3
 8003170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003174:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	4b39      	ldr	r3, [pc, #228]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003182:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003186:	2102      	movs	r1, #2
 8003188:	6011      	str	r1, [r2, #0]
 800318a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800318e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	fa92 f1a2 	rbit	r1, r2
 8003198:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800319c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80031a0:	6011      	str	r1, [r2, #0]
  return result;
 80031a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031a6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	fab2 f282 	clz	r2, r2
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	f002 021f 	and.w	r2, r2, #31
 80031bc:	2101      	movs	r1, #1
 80031be:	fa01 f202 	lsl.w	r2, r1, r2
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d184      	bne.n	80030d2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d105      	bne.n	80031dc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d0:	4b23      	ldr	r3, [pc, #140]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	4a22      	ldr	r2, [pc, #136]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 80031d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8242 	beq.w	8003672 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ee:	4b1c      	ldr	r3, [pc, #112]	; (8003260 <HAL_RCC_OscConfig+0xc58>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	f000 8213 	beq.w	8003622 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003200:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	2b02      	cmp	r3, #2
 800320a:	f040 8162 	bne.w	80034d2 <HAL_RCC_OscConfig+0xeca>
 800320e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003212:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003216:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800321a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	fa93 f2a3 	rbit	r2, r3
 800322a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003232:	601a      	str	r2, [r3, #0]
  return result;
 8003234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003238:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800323c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003248:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	461a      	mov	r2, r3
 8003250:	2300      	movs	r3, #0
 8003252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7fe f8b0 	bl	80013b8 <HAL_GetTick>
 8003258:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800325c:	e00c      	b.n	8003278 <HAL_RCC_OscConfig+0xc70>
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003264:	f7fe f8a8 	bl	80013b8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e1fd      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
 8003278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003280:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	fa93 f2a3 	rbit	r2, r3
 8003294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003298:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800329c:	601a      	str	r2, [r3, #0]
  return result;
 800329e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80032a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d102      	bne.n	80032c2 <HAL_RCC_OscConfig+0xcba>
 80032bc:	4bb0      	ldr	r3, [pc, #704]	; (8003580 <HAL_RCC_OscConfig+0xf78>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	e027      	b.n	8003312 <HAL_RCC_OscConfig+0xd0a>
 80032c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80032ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	fa93 f2a3 	rbit	r2, r3
 80032de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80032f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f2a3 	rbit	r2, r3
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	4b9c      	ldr	r3, [pc, #624]	; (8003580 <HAL_RCC_OscConfig+0xf78>)
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003316:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800331a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800331e:	6011      	str	r1, [r2, #0]
 8003320:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003324:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	fa92 f1a2 	rbit	r1, r2
 800332e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003332:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003336:	6011      	str	r1, [r2, #0]
  return result;
 8003338:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800333c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	fab2 f282 	clz	r2, r2
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	f042 0220 	orr.w	r2, r2, #32
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	f002 021f 	and.w	r2, r2, #31
 8003352:	2101      	movs	r1, #1
 8003354:	fa01 f202 	lsl.w	r2, r1, r2
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d182      	bne.n	8003264 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800335e:	4b88      	ldr	r3, [pc, #544]	; (8003580 <HAL_RCC_OscConfig+0xf78>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	430b      	orrs	r3, r1
 8003380:	497f      	ldr	r1, [pc, #508]	; (8003580 <HAL_RCC_OscConfig+0xf78>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
 8003386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800338e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003398:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	fa93 f2a3 	rbit	r2, r3
 80033a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033aa:	601a      	str	r2, [r3, #0]
  return result;
 80033ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033b4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	461a      	mov	r2, r3
 80033c8:	2301      	movs	r3, #1
 80033ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fd fff4 	bl	80013b8 <HAL_GetTick>
 80033d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d4:	e009      	b.n	80033ea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fd ffef 	bl	80013b8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e144      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
 80033ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80033f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	fa93 f2a3 	rbit	r2, r3
 8003406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800340e:	601a      	str	r2, [r3, #0]
  return result;
 8003410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003414:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003418:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d102      	bne.n	8003434 <HAL_RCC_OscConfig+0xe2c>
 800342e:	4b54      	ldr	r3, [pc, #336]	; (8003580 <HAL_RCC_OscConfig+0xf78>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	e027      	b.n	8003484 <HAL_RCC_OscConfig+0xe7c>
 8003434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003438:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800343c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003446:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	fa93 f2a3 	rbit	r2, r3
 8003450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003454:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003462:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	fa93 f2a3 	rbit	r2, r3
 8003476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	4b3f      	ldr	r3, [pc, #252]	; (8003580 <HAL_RCC_OscConfig+0xf78>)
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003488:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800348c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003490:	6011      	str	r1, [r2, #0]
 8003492:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003496:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	fa92 f1a2 	rbit	r1, r2
 80034a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80034a8:	6011      	str	r1, [r2, #0]
  return result;
 80034aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	fab2 f282 	clz	r2, r2
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	f042 0220 	orr.w	r2, r2, #32
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	f002 021f 	and.w	r2, r2, #31
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d082      	beq.n	80033d6 <HAL_RCC_OscConfig+0xdce>
 80034d0:	e0cf      	b.n	8003672 <HAL_RCC_OscConfig+0x106a>
 80034d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	fa93 f2a3 	rbit	r2, r3
 80034ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034f6:	601a      	str	r2, [r3, #0]
  return result;
 80034f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003500:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800350c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	461a      	mov	r2, r3
 8003514:	2300      	movs	r3, #0
 8003516:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fd ff4e 	bl	80013b8 <HAL_GetTick>
 800351c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003520:	e009      	b.n	8003536 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003522:	f7fd ff49 	bl	80013b8 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e09e      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
 8003536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800353e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003548:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	fa93 f2a3 	rbit	r2, r3
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800355a:	601a      	str	r2, [r3, #0]
  return result;
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003564:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d104      	bne.n	8003584 <HAL_RCC_OscConfig+0xf7c>
 800357a:	4b01      	ldr	r3, [pc, #4]	; (8003580 <HAL_RCC_OscConfig+0xf78>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	e029      	b.n	80035d4 <HAL_RCC_OscConfig+0xfcc>
 8003580:	40021000 	.word	0x40021000
 8003584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003588:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800358c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003596:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	fa93 f2a3 	rbit	r2, r3
 80035a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80035b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	fa93 f2a3 	rbit	r2, r3
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <HAL_RCC_OscConfig+0x1078>)
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80035dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035e0:	6011      	str	r1, [r2, #0]
 80035e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035e6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	fa92 f1a2 	rbit	r1, r2
 80035f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80035f8:	6011      	str	r1, [r2, #0]
  return result;
 80035fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035fe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	fab2 f282 	clz	r2, r2
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	f042 0220 	orr.w	r2, r2, #32
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	f002 021f 	and.w	r2, r2, #31
 8003614:	2101      	movs	r1, #1
 8003616:	fa01 f202 	lsl.w	r2, r1, r2
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d180      	bne.n	8003522 <HAL_RCC_OscConfig+0xf1a>
 8003620:	e027      	b.n	8003672 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e01e      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003636:	4b12      	ldr	r3, [pc, #72]	; (8003680 <HAL_RCC_OscConfig+0x1078>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800363e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003642:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	429a      	cmp	r2, r3
 8003654:	d10b      	bne.n	800366e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003656:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800365a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800365e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003662:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800366a:	429a      	cmp	r2, r3
 800366c:	d001      	beq.n	8003672 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000

08003684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b09e      	sub	sp, #120	; 0x78
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e162      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800369c:	4b90      	ldr	r3, [pc, #576]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d910      	bls.n	80036cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b8d      	ldr	r3, [pc, #564]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 0207 	bic.w	r2, r3, #7
 80036b2:	498b      	ldr	r1, [pc, #556]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b89      	ldr	r3, [pc, #548]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e14a      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d8:	4b82      	ldr	r3, [pc, #520]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	497f      	ldr	r1, [pc, #508]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80dc 	beq.w	80038b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d13c      	bne.n	800377a <HAL_RCC_ClockConfig+0xf6>
 8003700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003704:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800370e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003710:	fab3 f383 	clz	r3, r3
 8003714:	b2db      	uxtb	r3, r3
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d102      	bne.n	800372a <HAL_RCC_ClockConfig+0xa6>
 8003724:	4b6f      	ldr	r3, [pc, #444]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	e00f      	b.n	800374a <HAL_RCC_ClockConfig+0xc6>
 800372a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800372e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003732:	fa93 f3a3 	rbit	r3, r3
 8003736:	667b      	str	r3, [r7, #100]	; 0x64
 8003738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800373c:	663b      	str	r3, [r7, #96]	; 0x60
 800373e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003746:	4b67      	ldr	r3, [pc, #412]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800374e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003752:	fa92 f2a2 	rbit	r2, r2
 8003756:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003758:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800375a:	fab2 f282 	clz	r2, r2
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	f042 0220 	orr.w	r2, r2, #32
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	f002 021f 	and.w	r2, r2, #31
 800376a:	2101      	movs	r1, #1
 800376c:	fa01 f202 	lsl.w	r2, r1, r2
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d17b      	bne.n	800386e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0f3      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d13c      	bne.n	80037fc <HAL_RCC_ClockConfig+0x178>
 8003782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003786:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d102      	bne.n	80037ac <HAL_RCC_ClockConfig+0x128>
 80037a6:	4b4f      	ldr	r3, [pc, #316]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	e00f      	b.n	80037cc <HAL_RCC_ClockConfig+0x148>
 80037ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037b4:	fa93 f3a3 	rbit	r3, r3
 80037b8:	647b      	str	r3, [r7, #68]	; 0x44
 80037ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037be:	643b      	str	r3, [r7, #64]	; 0x40
 80037c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c8:	4b46      	ldr	r3, [pc, #280]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80037d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037d4:	fa92 f2a2 	rbit	r2, r2
 80037d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80037da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037dc:	fab2 f282 	clz	r2, r2
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	f042 0220 	orr.w	r2, r2, #32
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	f002 021f 	and.w	r2, r2, #31
 80037ec:	2101      	movs	r1, #1
 80037ee:	fa01 f202 	lsl.w	r2, r1, r2
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d13a      	bne.n	800386e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0b2      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
 80037fc:	2302      	movs	r3, #2
 80037fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d102      	bne.n	8003824 <HAL_RCC_ClockConfig+0x1a0>
 800381e:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	e00d      	b.n	8003840 <HAL_RCC_ClockConfig+0x1bc>
 8003824:	2302      	movs	r3, #2
 8003826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
 8003830:	2302      	movs	r3, #2
 8003832:	623b      	str	r3, [r7, #32]
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	2202      	movs	r2, #2
 8003842:	61ba      	str	r2, [r7, #24]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	fa92 f2a2 	rbit	r2, r2
 800384a:	617a      	str	r2, [r7, #20]
  return result;
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	fab2 f282 	clz	r2, r2
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	f042 0220 	orr.w	r2, r2, #32
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	f002 021f 	and.w	r2, r2, #31
 800385e:	2101      	movs	r1, #1
 8003860:	fa01 f202 	lsl.w	r2, r1, r2
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e079      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f023 0203 	bic.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	491a      	ldr	r1, [pc, #104]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003880:	f7fd fd9a 	bl	80013b8 <HAL_GetTick>
 8003884:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	e00a      	b.n	800389e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003888:	f7fd fd96 	bl	80013b8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	; 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e061      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 020c 	and.w	r2, r3, #12
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d1eb      	bne.n	8003888 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d214      	bcs.n	80038e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 0207 	bic.w	r2, r3, #7
 80038c6:	4906      	ldr	r1, [pc, #24]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e040      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
 80038e0:	40022000 	.word	0x40022000
 80038e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f4:	4b1d      	ldr	r3, [pc, #116]	; (800396c <HAL_RCC_ClockConfig+0x2e8>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	491a      	ldr	r1, [pc, #104]	; (800396c <HAL_RCC_ClockConfig+0x2e8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003912:	4b16      	ldr	r3, [pc, #88]	; (800396c <HAL_RCC_ClockConfig+0x2e8>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4912      	ldr	r1, [pc, #72]	; (800396c <HAL_RCC_ClockConfig+0x2e8>)
 8003922:	4313      	orrs	r3, r2
 8003924:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003926:	f000 f829 	bl	800397c <HAL_RCC_GetSysClockFreq>
 800392a:	4601      	mov	r1, r0
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <HAL_RCC_ClockConfig+0x2e8>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003934:	22f0      	movs	r2, #240	; 0xf0
 8003936:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	fa92 f2a2 	rbit	r2, r2
 800393e:	60fa      	str	r2, [r7, #12]
  return result;
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	fab2 f282 	clz	r2, r2
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	40d3      	lsrs	r3, r2
 800394a:	4a09      	ldr	r2, [pc, #36]	; (8003970 <HAL_RCC_ClockConfig+0x2ec>)
 800394c:	5cd3      	ldrb	r3, [r2, r3]
 800394e:	fa21 f303 	lsr.w	r3, r1, r3
 8003952:	4a08      	ldr	r2, [pc, #32]	; (8003974 <HAL_RCC_ClockConfig+0x2f0>)
 8003954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <HAL_RCC_ClockConfig+0x2f4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd fce8 	bl	8001330 <HAL_InitTick>
  
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3778      	adds	r7, #120	; 0x78
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	08003e8c 	.word	0x08003e8c
 8003974:	20000000 	.word	0x20000000
 8003978:	20000004 	.word	0x20000004

0800397c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800397c:	b480      	push	{r7}
 800397e:	b08b      	sub	sp, #44	; 0x2c
 8003980:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	2300      	movs	r3, #0
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003996:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d002      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0x30>
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d003      	beq.n	80039b2 <HAL_RCC_GetSysClockFreq+0x36>
 80039aa:	e03c      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039ac:	4b24      	ldr	r3, [pc, #144]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039ae:	623b      	str	r3, [r7, #32]
      break;
 80039b0:	e03c      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80039b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80039bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	fa92 f2a2 	rbit	r2, r2
 80039c4:	607a      	str	r2, [r7, #4]
  return result;
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	fab2 f282 	clz	r2, r2
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	40d3      	lsrs	r3, r2
 80039d0:	4a1c      	ldr	r2, [pc, #112]	; (8003a44 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80039d6:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	220f      	movs	r2, #15
 80039e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	fa92 f2a2 	rbit	r2, r2
 80039e8:	60fa      	str	r2, [r7, #12]
  return result;
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	fab2 f282 	clz	r2, r2
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	40d3      	lsrs	r3, r2
 80039f4:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039f6:	5cd3      	ldrb	r3, [r2, r3]
 80039f8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a04:	4a0e      	ldr	r2, [pc, #56]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
 8003a14:	e004      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	4a0c      	ldr	r2, [pc, #48]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	623b      	str	r3, [r7, #32]
      break;
 8003a24:	e002      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a28:	623b      	str	r3, [r7, #32]
      break;
 8003a2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	372c      	adds	r7, #44	; 0x2c
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	007a1200 	.word	0x007a1200
 8003a44:	08003e9c 	.word	0x08003e9c
 8003a48:	08003eac 	.word	0x08003eac
 8003a4c:	003d0900 	.word	0x003d0900

08003a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b092      	sub	sp, #72	; 0x48
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80d4 	beq.w	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a74:	4b4e      	ldr	r3, [pc, #312]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10e      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a80:	4b4b      	ldr	r3, [pc, #300]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	4a4a      	ldr	r2, [pc, #296]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	61d3      	str	r3, [r2, #28]
 8003a8c:	4b48      	ldr	r3, [pc, #288]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9e:	4b45      	ldr	r3, [pc, #276]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d118      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aaa:	4b42      	ldr	r3, [pc, #264]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a41      	ldr	r2, [pc, #260]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab6:	f7fd fc7f 	bl	80013b8 <HAL_GetTick>
 8003aba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	e008      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abe:	f7fd fc7b 	bl	80013b8 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b64      	cmp	r3, #100	; 0x64
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e14b      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003adc:	4b34      	ldr	r3, [pc, #208]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8084 	beq.w	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d07c      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003afc:	4b2c      	ldr	r3, [pc, #176]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b26      	ldr	r3, [pc, #152]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	461a      	mov	r2, r3
 8003b26:	2301      	movs	r3, #1
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b4e:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d04b      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5e:	f7fd fc2b 	bl	80013b8 <HAL_GetTick>
 8003b62:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b64:	e00a      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b66:	f7fd fc27 	bl	80013b8 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e0f5      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	fa93 f3a3 	rbit	r3, r3
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
 8003b88:	2302      	movs	r3, #2
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	61fb      	str	r3, [r7, #28]
  return result;
 8003b94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f043 0302 	orr.w	r3, r3, #2
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d108      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003baa:	4b01      	ldr	r3, [pc, #4]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	e00d      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40007000 	.word	0x40007000
 8003bb8:	10908100 	.word	0x10908100
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	4b69      	ldr	r3, [pc, #420]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2202      	movs	r2, #2
 8003bce:	613a      	str	r2, [r7, #16]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	fa92 f2a2 	rbit	r2, r2
 8003bd6:	60fa      	str	r2, [r7, #12]
  return result;
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	fab2 f282 	clz	r2, r2
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	f002 021f 	and.w	r2, r2, #31
 8003bea:	2101      	movs	r1, #1
 8003bec:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0b7      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bf6:	4b5e      	ldr	r3, [pc, #376]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	495b      	ldr	r1, [pc, #364]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c10:	4b57      	ldr	r3, [pc, #348]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	4a56      	ldr	r2, [pc, #344]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c28:	4b51      	ldr	r3, [pc, #324]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	f023 0203 	bic.w	r2, r3, #3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	494e      	ldr	r1, [pc, #312]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c46:	4b4a      	ldr	r3, [pc, #296]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f023 0210 	bic.w	r2, r3, #16
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	4947      	ldr	r1, [pc, #284]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c64:	4b42      	ldr	r3, [pc, #264]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	493f      	ldr	r1, [pc, #252]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c82:	4b3b      	ldr	r3, [pc, #236]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f023 0220 	bic.w	r2, r3, #32
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	4938      	ldr	r1, [pc, #224]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ca0:	4b33      	ldr	r3, [pc, #204]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	4930      	ldr	r1, [pc, #192]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cbe:	4b2c      	ldr	r3, [pc, #176]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	4929      	ldr	r1, [pc, #164]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003cdc:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	4921      	ldr	r1, [pc, #132]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003cfa:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	491a      	ldr	r1, [pc, #104]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d18:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	4912      	ldr	r1, [pc, #72]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003d36:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	490b      	ldr	r1, [pc, #44]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	4903      	ldr	r1, [pc, #12]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3748      	adds	r7, #72	; 0x48
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000

08003d74 <memset>:
 8003d74:	4402      	add	r2, r0
 8003d76:	4603      	mov	r3, r0
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <memset+0xa>
 8003d7c:	4770      	bx	lr
 8003d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d82:	e7f9      	b.n	8003d78 <memset+0x4>

08003d84 <__libc_init_array>:
 8003d84:	b570      	push	{r4, r5, r6, lr}
 8003d86:	4d0d      	ldr	r5, [pc, #52]	; (8003dbc <__libc_init_array+0x38>)
 8003d88:	4c0d      	ldr	r4, [pc, #52]	; (8003dc0 <__libc_init_array+0x3c>)
 8003d8a:	1b64      	subs	r4, r4, r5
 8003d8c:	10a4      	asrs	r4, r4, #2
 8003d8e:	2600      	movs	r6, #0
 8003d90:	42a6      	cmp	r6, r4
 8003d92:	d109      	bne.n	8003da8 <__libc_init_array+0x24>
 8003d94:	4d0b      	ldr	r5, [pc, #44]	; (8003dc4 <__libc_init_array+0x40>)
 8003d96:	4c0c      	ldr	r4, [pc, #48]	; (8003dc8 <__libc_init_array+0x44>)
 8003d98:	f000 f818 	bl	8003dcc <_init>
 8003d9c:	1b64      	subs	r4, r4, r5
 8003d9e:	10a4      	asrs	r4, r4, #2
 8003da0:	2600      	movs	r6, #0
 8003da2:	42a6      	cmp	r6, r4
 8003da4:	d105      	bne.n	8003db2 <__libc_init_array+0x2e>
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
 8003da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dac:	4798      	blx	r3
 8003dae:	3601      	adds	r6, #1
 8003db0:	e7ee      	b.n	8003d90 <__libc_init_array+0xc>
 8003db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db6:	4798      	blx	r3
 8003db8:	3601      	adds	r6, #1
 8003dba:	e7f2      	b.n	8003da2 <__libc_init_array+0x1e>
 8003dbc:	08003ebc 	.word	0x08003ebc
 8003dc0:	08003ebc 	.word	0x08003ebc
 8003dc4:	08003ebc 	.word	0x08003ebc
 8003dc8:	08003ec0 	.word	0x08003ec0

08003dcc <_init>:
 8003dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dce:	bf00      	nop
 8003dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd2:	bc08      	pop	{r3}
 8003dd4:	469e      	mov	lr, r3
 8003dd6:	4770      	bx	lr

08003dd8 <_fini>:
 8003dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dda:	bf00      	nop
 8003ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dde:	bc08      	pop	{r3}
 8003de0:	469e      	mov	lr, r3
 8003de2:	4770      	bx	lr
